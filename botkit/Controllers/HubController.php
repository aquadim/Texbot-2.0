<?php
// –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π

namespace BotKit\Controllers;

use BotKit\Controller;
use BotKit\Models\Messages\TextMessage as M;
use BotKit\Models\Keyboards\ClearKeyboard;
use BotKit\Models\Attachments\PhotoAttachment;
use BotKit\Database;

use BotKit\Entities\Student;
use BotKit\Entities\CollegeGroup;
use BotKit\Entities\Period;

use BotKit\Keyboards\TOSKeyboard;
use BotKit\Keyboards\SuggestEnterAversCredentialsKeyboard;
use BotKit\Keyboards\TeacherOrStudentKeyboard;
use BotKit\Keyboards\SelectGroup1Keyboard;
use BotKit\Keyboards\HubKeyboard;
use BotKit\Keyboards\YesNoKeyboard;
use BotKit\Keyboards\ProfileKeyboard;
use BotKit\Keyboards\SelectPeriodKeyboard;

use BotKit\Enums\State;
use BotKit\Enums\CallbackType;

use Texbot\GenericImagen;
use Texbot\GradesImagen;
use function Texbot\getWaitMessage;
use function Texbot\getDoneText;
use function Texbot\getStudentGrades;

class HubController extends Controller {
    
    // –û—Ü–µ–Ω–∫–∏
    public function grades() {
        // TODO: –ø–æ–∏—Å–∫ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ
        
        $wait = getWaitMessage();
        $this->reply($wait);
        
        // –ü–æ–∏—Å–∫ —Å—Ç—É–¥–µ–Ω—Ç–∞
        $em = Database::getEm();
        $student = $em->getRepository(Student::class)->findOneBy(
            ['user' => $this->u->getEntity()]
        );
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è
        $login = $student->getAversLogin();
        $password = $student->getAversPassword();
        
        if ($login === null || $password === null) {
            $m = M::create("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã —Ç–≤–æ–∏ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ—Ç –ê–í–ï–†–°");
            $m->setKeyboard(new SuggestEnterAversCredentialsKeyboard());
            $this->edit($wait, $m);
            return;
        }
        
        $em = Database::getEm();
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–≥–æ —Å–µ–º–µ—Å—Ç—Ä–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞
        $student = $em->getRepository(Student::class)->findOneBy(
            ['user' => $this->u->getEntity()]
        );
        $period = $student->getPreferencedPeriod();
        
        if ($period === null) {
            $this->edit(
                $wait,
                M::create("‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —Å–µ–º–µ—Å—Ç—Ä. –í—ã–±–µ—Ä–∏ —Å–µ–º–µ—Å—Ç—Ä –∏–∑ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è")
            );
            return;
        }
        
        $data = getStudentGrades(
            $login,
            $password,
            $period->getAversId()
        );
        
        if (!$data['ok']) {
            $this->edit($wait, M::create('‚ùå '.$data['data']));
            return;
        }
        
        $filename = GradesImagen::generateTable(
            $data['data'],
            ['–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞', '–û—Ü–µ–Ω–∫–∏', '–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª'],
            '–û—Ü–µ–Ω–∫–∏, '.$period->getHumanName(),
            [35, 40, 0],
            0
        );
        
        $m = M::create(getDoneText(true));
        $m->addPhoto(PhotoAttachment::fromFile($filename));
        $this->edit($wait, $m);
    }
    
    // –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤
    public function bellsSchedule() {
        $this->replyText(
        "–ó–≤–æ–Ω–∫–∏ –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫:\n".
        "1 –ø–∞—Ä–∞: 8:00 - 9:35 (–ø–µ—Ä–µ—Ä—ã–≤ –≤ 8:45)\n".
        "2 –ø–∞—Ä–∞: 9:45 - 11:20 (–ø–µ—Ä–µ—Ä—ã–≤ –≤ 10:30)\n".
        "–ö–ª —á–∞—Å: 11:30 - 12:15\n".
        "–û–±–µ–¥: 12:15-13:00\n".
        "3 –ø–∞—Ä–∞: 13:00 - 14:35 (–ø–µ—Ä–µ—Ä—ã–≤ –≤ 13:45)\n".
        "4 –ø–∞—Ä–∞: 14:45 - 16:20 (–ø–µ—Ä–µ—Ä—ã–≤ –≤ 15:30)\n".
        "5 –ø–∞—Ä–∞: 16:30 - 18:05 (–ø–µ—Ä–µ—Ä—ã–≤ –≤ 17:15).\n".
        "\n".
        "–ó–≤–æ–Ω–∫–∏ —Å–æ –≤—Ç–æ—Ä–Ω–∏–∫–∞ –ø–æ –ø—è—Ç–Ω–∏—Ü—É\n".
        "1 –ø–∞—Ä–∞: 8:00 - 9:35 (–ø–µ—Ä–µ—Ä—ã–≤ –≤ 8:45)\n".
        "2 –ø–∞—Ä–∞: 9:45 - 11:20 (–ø–µ—Ä–µ—Ä—ã–≤ –≤ 10:30)\n".
        "–û–±–µ–¥: 11:20 - 12:20\n".
        "3 –ø–∞—Ä–∞: 12:20 - 13:55 (–ø–µ—Ä–µ—Ä—ã–≤ –≤ 13:05)\n".
        "4 –ø–∞—Ä–∞: 14:05 - 15:40 (–ø–µ—Ä–µ—Ä—ã–≤ –≤ 14:50)\n".
        "5 –ø–∞—Ä–∞: 15:50 - 17:25 (–ø–µ—Ä–µ—Ä—ã–≤ –≤ 16:35)\n".
        "\n".
        "–ó–≤–æ–Ω–∫–∏ –≤ —Å—É–±–±–æ—Ç—É\n".
        "1 –ø–∞—Ä–∞: 8:00 - 9:25 (–ø–µ—Ä–µ—Ä—ã–≤ –≤ 8:40)\n".
        "2 –ø–∞—Ä–∞: 09:35 - 11:00 (–ø–µ—Ä–µ—Ä—ã–≤ –≤ 10:15)\n".
        "3 –ø–∞—Ä–∞: 11:10 - 12:35 (–ø–µ—Ä–µ—Ä—ã–≤ –≤ 11:50)\n".
        "4 –ø–∞—Ä–∞: 12:45 - 14:10 (–ø–µ—Ä–µ—Ä—ã–≤ –≤ 13:25)"
        );
    }
    
    // –ü–æ–∫–∞–∑ –ø—Ä–æ—Ñ–∏–ª—è
    public function showProfile() {
        $em = Database::getEm();
        $student = $em->getRepository(Student::class)->findOneBy(
            ['user' => $this->u->getEntity()]
        );
        
        // –ì—Ä—É–ø–ø–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞
        $group = $student->getGroup();
        $profile_text = 
        'üë• –¢–≤–æ—è –≥—Ä—É–ø–ø–∞: '.
        $group->getCourseNum().
        ' '.
        $group->getSpec()->getName().
        "\n";
        
        // –õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –ê–í–ï–†–°
        $avers_login = $student->getAversLogin();
        $avers_login_set = $avers_login !== null;
        if (!$avers_login_set) {
            $profile_text .= "‚ö† –í—ã –Ω–µ —É–∫–∞–∑—ã–≤–∞–ª–∏ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ—Ç —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–≥–æ –∂—É—Ä–Ω–∞–ª–∞\n";
        } else {
            $profile_text .= "üÜî –õ–æ–≥–∏–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –¥–ª—è —Å–±–æ—Ä–∞ –≤–∞—à–∏—Ö –æ—Ü–µ–Ω–æ–∫ - ".$avers_login."\n";
        }
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π —Å–µ–º–µ—Å—Ç—Ä
        $avers_period = $student->getPreferencedPeriod();
        $avers_period_set = $avers_period !== null;
        if (!$avers_period_set) {
            // –ü–æ –∏–¥–µ–µ —Ç–∞–∫–æ–≥–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –Ω–µ –¥–æ–ª–∂–Ω–æ, –≤–µ–¥—å —Å–µ–º–µ—Å—Ç—Ä
            // —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, —Å–º. OnboardingController
            // –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –≤—Å—Ç–∞–≤–∏–º
            $profile_text .= "‚ö† –ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —Å–µ–º–µ—Å—Ç—Ä —Å–±–æ—Ä–∞ –æ—Ü–µ–Ω–æ–∫\n";
        } else {
            $profile_text .= "üóì –°–µ–º–µ—Å—Ç—Ä —Å–±–æ—Ä–∞ –æ—Ü–µ–Ω–æ–∫: ".$avers_period->getHumanName()."\n";
        }
         
        $m = M::create($profile_text);
        $m->setKeyboard(new ProfileKeyboard($avers_login_set));
        $this->reply($m);
    }
    
    // –°–º–µ–Ω–∞ –≥—Ä—É–ø–ø—ã —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–∞—á–∞–ª–æ
    public function changeStudentGroupStart() {
        // 1.
        $this->u->setState(State::NoResponse);
        $m = M::create("–ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã");
        $m->setKeyboard(new ClearKeyboard());
        $this->editAssociatedMessage($m);
        
        // 2.
        $m = M::create("–ù–∞ –∫–∞–∫–æ–π –∫—É—Ä—Å –º–µ–Ω—è–µ–º?");
        $m->setKeyboard(new SelectGroup1Keyboard(
            CallbackType::SelectedGroupForStudentEdit
        ));
        $this->reply($m);
    }
    
    // –°–º–µ–Ω–∞ –≥—Ä—É–ø–ø—ã —Å—Ç—É–¥–µ–Ω—Ç–∞ –∫–æ–Ω–µ—Ü
    public function changeStudentGroupEnd($group_id) {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã
        $em = Database::getEm();
        $student = $em->getRepository(Student::class)->findOneBy(
            ['user' => $this->u->getEntity()]
        );
        $group = $em->find(CollegeGroup::class, $group_id);
        $student->setGroup($group);
        
        // –ü–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        $this->u->setState(State::Hub);
        $m = M::create("–ì—Ä—É–ø–ø–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞, –Ω–∞—Å–ª–∞–∂–¥–∞–π—Å—è!");
        $m->setKeyboard(new HubKeyboard());
        $this->reply($m);
    }
    
    // –°–º–µ–Ω–∞ —Å–µ–º–µ—Å—Ç—Ä–∞ 1
    public function changeStudentPeriod() {
        // –í—ã–±—Ä–∞—Ç—å –≤—Å–µ —Å–µ–º–µ—Å—Ç—Ä—ã —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
        $em = Database::getEm();
        $student = $em->getRepository(Student::class)->findOneBy(
            ['user' => $this->u->getEntity()]
        );
        $group = $student->getGroup();
        $periods = $em->getRepository(Period::class)->findBy(
            ['group' => $group]
        );
        
        $m = M::create("–í—ã–±–µ—Ä–∏ –Ω–æ–≤—ã–π —Å–µ–º–µ—Å—Ç—Ä");
        $m->setKeyboard(new SelectPeriodKeyboard($periods));
        $this->editAssociatedMessage($m);
    }
    
    // –°–º–µ–Ω–∞ —Å–µ–º–µ—Å—Ç—Ä–∞ 2
    public function studentPeriodSelected($period_id) {
        $em = Database::getEm();
        $student = $em->getRepository(Student::class)->findOneBy(
            ['user' => $this->u->getEntity()]
        );
        $period = $em->find(Period::class, $period_id);
        $student->setPreferencedPeriod($period);
        
        $this->editAssociatedMessage(M::create("‚úÖ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã"));
    }
}
